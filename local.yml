version: "3"

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  documentserver_postgresql_data: {}

networks:
  dokeza-network:
  ds-network:

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: dokeza_2_0_local_django
    container_name: django
    depends_on:
      - postgres
      - mailhog
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.production/.postgres
    command: /start
    ports:
      - "8000:8000"
    restart: always
    networks:
      - dokeza-network

  trackerservice:
    build:
      context: ./tracker/reportservice
      dockerfile: Dockerfile
    image: dokeza_2_0_tracker_service
    container_name: trackerservice
    depends_on:
      - postgres
      - django
      - mailhog
    restart: always
    networks:
      - dokeza-network

  postgres:
    build:
      context: ./compose/production/postgres
      dockerfile: Dockerfile
    image: dokeza_2_0_production_postgres
    container_name: postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
      - local_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres
    ports:
      - "5434:5432"
    restart: always
    networks:
      - dokeza-network

  redis:
    image: redis:5.0
    container_name: redis
    restart: always
    networks:
      - dokeza-network

  documentserver:
    build:
      context: .
      dockerfile: ./compose/local/documentserver/Dockerfile
    container_name: documentserver
    env_file:
      - ./.envs/.local/.documentserver
    depends_on:
      - ds-postgresql
      - onlyoffice-rabbitmq
      - ds-redis
    ports:
      - "8082:80"
      - "8443:443"
    stdin_open: true
    restart: always
    stop_grace_period: 60s
    volumes:
      - /var/www/onlyoffice/Data
      - /var/log/onlyoffice
      - /var/lib/onlyoffice/documentserver/App_Data/cache/files
      - /var/www/onlyoffice/documentserver-example/public/files
      - /usr/share/fonts
    networks:
      - ds-network

  onlyoffice-rabbitmq:
    container_name: onlyoffice-rabbitmq
    image: rabbitmq
    restart: always
    expose:
      - "5672"
    networks:
      - ds-network

  ds-postgresql:
    container_name: ds-postgresql
    image: postgres:12.3-alpine
    env_file:
      - ./.envs/.local/.documentserver
    restart: always
    expose:
      - "5432"
    volumes:
      - documentserver_postgresql_data:/var/lib/postgresql
    networks:
      - ds-network

  ds-redis:
    image: redis:5.0
    container_name: ds-redis
    restart: always
    networks:
      - ds-network

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - dokeza-network

  celeryworker:
    <<: *django
    image: dokeza_2_0_local_celeryworker
    container_name: celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    command: /start-celeryworker
    restart: always
    networks:
      - dokeza-network

  celerybeat:
    <<: *django
    image: dokeza_2_0_local_celerybeat
    container_name: celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    command: /start-celerybeat
    restart: always
    networks:
      - dokeza-network

  flower:
    <<: *django
    image: dokeza_2_0_local_flower
    container_name: flower
    ports:
      - "5555:5555"
    command: /start-flower
    restart: always
    networks:
      - dokeza-network
  # docs:
  #   image: dokeza_2_0_local_docs
  #   container_name: dokeza_docs
  #   build:
  #     context: .
  #     dockerfile: ./compose/local/docs/Dockerfile
  #   env_file:
  #     - ./.envs/.local/.docs
  #   volumes:
  #     - ./docs:/docs:z
  #     - ./config:/app/config:z
  #     - ./dokeza_2_0:/app/dokeza_2_0:z
  #   ports:
  #     - "7000:7000"
  #   command: /start-docs
