version: '3'

volumes:
  production_postgres_data:
  production_postgres_backups:
  production_certbot_var:
  production_certbot_etc:
  # documentserver_postgresql_data:

networks:
  dokeza-network:
  # ds-network:

services:
  nginx:
    container_name: nginx
    build:
      context: ./compose/production/nginx
      dockerfile: Dockerfile
    restart: always
    volumes:
      - production_certbot_var:/var/www/certbot
      - production_certbot_etc:/etc/letsencrypt
    ports:
      - '80:80'
      - '443:443'
    networks:
      - dokeza-network

  certbot:
    container_name: certbot
    build:
      context: ./compose/production/certbot
      dockerfile: Dockerfile
    volumes:
      - production_certbot_var:/var/www/certbot
      - production_certbot_etc:/etc/letsencrypt
    command: certonly --webroot -w /var/www/certbot -d staging-dokeza.mzalendo.com -m admin@ra.co.ke,chanua@ra.co.ke -n --agree-tos --force-renewal --test-cert --dry-run
    networks:  
      - dokeza-network

  redis:
    container_name: redis
    build:
      context: ./compose/production/redis
      dockerfile: Dockerfile
    networks:
      - dokeza-network

  postgres:
    container_name: postgres
    build:
      context: ./compose/production/postgres
      dockerfile: Dockerfile
    image: dokeza_2_0_staging_postgres
    env_file:
      - ./.envs/.production/.postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_backups:/backups
    networks:
      - dokeza-network

  awscli:
    container_name: awscli
    build:
      context: ./compose/production
      dockerfile: awscli/Dockerfile
    env_file:
      - ./.envs/.production/.django
    volumes:
      - production_postgres_backups:/backups
    networks:
      - dokeza-network

  django_staging: &django_staging
    container_name: django_staging
    build:
      context: .
      dockerfile: ./compose/production/django-staging/Dockerfile
    image: dokeza_2_0_staging_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    networks:
      - dokeza-network

  # documentserver:
  #   build:
  #     context: .
  #     dockerfile: ./compose/local/documentserver/Dockerfile
  #   container_name: documentserver
  #   env_file:
  #     - ./.envs/.local/.documentserver
  #   depends_on:
  #     - ds-postgresql
  #     - ds-rabbitmq
  #   ports:
  #     - '8082:80'
  #     - '443:443'
  #   stdin_open: true
  #   restart: always
  #   volumes:
  #     - /var/www/onlyoffice/Data
  #     - /var/log/onlyoffice
  #     - /var/lib/onlyoffice/documentserver/App_Data/cache/files
  #     - /var/www/onlyoffice/documentserver-example/public/files
  #     - /usr/share/fonts
  #   networks:
  #     - ds-network

  # ds-rabbitmq:
  #   container_name: ds-rabbitmq
  #   image: rabbitmq
  #   restart: always
  #   expose:
  #     - '5672'
  #   networks:
  #     - ds-network

  # ds-postgresql:
  #   container_name: ds-postgresql
  #   image: postgres:12.3-alpine
  #   env_file:
  #     - ./.envs/.local/.documentserver
  #   restart: always
  #   expose:
  #     - '5432'
  #   volumes:
  #     - documentserver_postgresql_data:/var/lib/postgresql
  #   networks:
  #     - ds-network

  # ds-redis:
  #   image: redis:5.0
  #   container_name: ds-redis
  #   restart: always
  #   networks:
  #     - ds-network

  celeryworker:
    <<: *django_staging
    image: dokeza_2_0_production_celeryworker
    command: /start-celeryworker
    networks:
      - dokeza-network

  celerybeat:
    <<: *django_staging
    image: dokeza_2_0_production_celerybeat
    command: /start-celerybeat
    networks:
      - dokeza-network

  flower:
    <<: *django_staging
    image: dokeza_2_0_production_flower
    command: /start-flower
    networks:
      - dokeza-network
